#!/usr/bin/env python

#import tornado.options
#from tornado.options import define, options

import urllib2
import urllib
import json
import datetime
from optparse import OptionParser

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

from pprint import pprint
from sourcy.models import Article
from sourcy.util import parse_config_file

from tornado.options import define, options


def get_arts(num_days=1):
    date_from = datetime.date.today() - datetime.timedelta(days = num_days-1)
    date_to = datetime.date.today()

    phrases = ("scientists have", "scientists say",  "paper published", "research suggests", "latest research", "researchers", "the study")

    searchtxt = " OR ".join(['"'+s+'"' for s in phrases])

    search = '(%s) %s..%s' % (
            " OR ".join(['"'+s+'"' for s in phrases]),
            date_from.strftime('%Y%m%d'),
            date_to.strftime('%Y%m%d'))

    print search
    params = {'search': search,
            'limit': 1000,
            'output': 'js',
            }
    url = "http://journalisted.com/api/findArticles?" + urllib.urlencode(params)

    foo = json.load(urllib2.urlopen(url), encoding='utf-8')
    articles = foo['results']
    return articles

def main():
    parse_config_file("sourcy.conf")

    parser = OptionParser()
    parser.add_option("-n", type="int", dest="num_days", default=1)

    (opts, args) = parser.parse_args()

#    arts = get_arts(opts.num_days)


    eng_url = "mysql+mysqldb://%(user)s:%(password)s@%(host)s/%(db)s?charset=utf8" % {
        'user': options.mysql_user,
        'password': options.mysql_password,
        'host': options.mysql_host,
        'db': options.mysql_database
    }
    engine = create_engine(eng_url, echo=False)
    Session = sessionmaker(bind=engine)
    session = Session()

    for art in session.query(Article).all():
        print art.headline

#    s.art_bulk_import(arts)
    
    def art_bulk_import(self, articles):
        """ import a bunch of articles (without creating an action) """
        self.db.execute("BEGIN")

        for art in articles:
            if self.art_get_by_url(art['permalink']) is None:
                art_id = self.db.execute("INSERT INTO article (headline,permalink,pubdate) VALUES (%s,%s,%s)",art['title'],art['permalink'],art['pubdate'])
                self.db.execute("INSERT INTO article_url (article_id,url) VALUES (%s,%s)",art_id, art['permalink'])

        self.db.execute("COMMIT")

if __name__ == "__main__":
    main()

